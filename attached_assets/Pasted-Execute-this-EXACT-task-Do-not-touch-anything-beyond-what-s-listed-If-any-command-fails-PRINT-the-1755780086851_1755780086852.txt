Execute this EXACT task. Do not touch anything beyond what’s listed.
If any command fails, PRINT the error and STOP. Do not “fix” or scaffold.

GOAL
Fix 1) DirectoryController runtime by using IdentityService (not a non-existent repository prop).
Fix 2) /login route 404 by (re)adding a minimal login page.

TOUCH ONLY
apps/bff/src/modules/identity/directory.controller.ts
apps/web/app/login/page.tsx
apps/bff/src/modules/identity/identity.module.ts

CHANGES
1) apps/bff/src/modules/identity/directory.controller.ts — replace with service calls.
--- FULL FILE REPLACEMENT: apps/bff/src/modules/identity/directory.controller.ts ---
import { Controller, Get, Query } from '@nestjs/common';
import { IdentityService } from './identity.service';

@Controller('directory')
export class DirectoryController {
  constructor(private readonly identity: IdentityService) {}

  /**
   * List users by organization.
   * Query: orgId (required), limit (default 20), cursor (optional — placeholder for future)
   */
  @Get('users')
  async listUsers(
    @Query('orgId') orgId: string,
    @Query('limit') limitStr?: string,
    @Query('cursor') _cursor?: string, // reserved for future true cursor impl
  ) {
    if (!orgId || typeof orgId !== 'string') {
      return { users: [], nextCursor: null, error: 'orgId required' };
    }
    const limit = Math.min(Math.max(parseInt(limitStr || '20', 10) || 20, 1), 100);

    // Use IdentityService’s flexible getUsers wrapper
    const result = await this.identity.getUsers({ orgId }, limit);

    const users = Array.isArray(result) ? result : (result ? [result] : []);
    const nextCursor = users.length === limit ? users[users.length - 1]?.id ?? null : null;

    return { users, nextCursor };
  }
}
--- END FILE ---

2) apps/bff/src/modules/identity/identity.module.ts — ensure DirectoryController is registered.
--- PATCH START ---
@@
-  controllers: [/* existing controllers here */],
+  controllers: [/* existing controllers here */, DirectoryController],
--- PATCH END ---

3) apps/web/app/login/page.tsx — (re)add a minimal, modern login page with SSO button.
--- FULL FILE REPLACEMENT: apps/web/app/login/page.tsx ---
export default function LoginPage() {
  return (
    <main className="min-h-screen flex items-center justify-center bg-white text-black">
      <div className="w-full max-w-md border rounded-xl p-6 shadow-sm">
        <h1 className="text-2xl font-bold mb-3">Sign in</h1>
        <p className="text-sm text-neutral-600 mb-6">
          Use your organization email or continue with SSO.
        </p>

        <form method="POST" action="/api/bff/auth/login" className="space-y-3">
          <div>
            <label className="block text-sm mb-1">Organization ID</label>
            <input
              name="organizationId"
              placeholder="org_123"
              class

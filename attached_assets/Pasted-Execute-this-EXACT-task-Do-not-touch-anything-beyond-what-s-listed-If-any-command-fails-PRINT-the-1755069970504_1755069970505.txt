Execute this EXACT task. Do not touch anything beyond what’s listed.
If any command fails, PRINT the error and STOP. Do not “fix” or scaffold.

GOAL
Make @thrivio/contracts resolvable by TypeScript and prove it compiles:

Ensure all contracts source files exist with valid exports.

Ensure tsconfig.base.json has baseUrl + wildcard paths.

Compile a tiny temp file via a temp tsconfig that extends the base config (no filename + -p mix).

TOUCH ONLY
packages/contracts/src/primitives.ts
packages/contracts/src/identity.ts
packages/contracts/src/directory.ts
packages/contracts/src/media.ts
packages/contracts/src/index.ts
tsconfig.base.json
tsconfig.tmp.json
tmp_contracts_check.ts

CHANGES
// packages/contracts/src/primitives.ts
import { z } from "zod";
export const UUID = z.string().uuid();
export const Email = z.string().email();
export const ISODate = z.string().regex(/^\d{4}-\d{2}-\d{2}$/); // YYYY-MM-DD
export const Timestamp = z.string();
export type UUID = z.infer<typeof UUID>;
export type Email = z.infer<typeof Email>;

// packages/contracts/src/identity.ts
import { z } from "zod";
import { UUID, Email } from "./primitives";
export const UserPublic = z.object({
id: UUID, organizationId: UUID, email: Email,
firstName: z.string().nullable(), lastName: z.string().nullable(),
displayName: z.string().nullable()
});
export type UserPublic = z.infer<typeof UserPublic>;

export const OrgUnitPublic = z.object({
id: UUID, organizationId: UUID, type: z.enum(["company","department","team"]),
name: z.string(), parentId: UUID.nullable()
});
export type OrgUnitPublic = z.infer<typeof OrgUnitPublic>;

export const LocationPublic = z.object({
id: UUID, organizationId: UUID, name: z.string()
});
export type LocationPublic = z.infer<typeof LocationPublic>;

// packages/contracts/src/directory.ts
import { z } from "zod";
import { Email, ISODate } from "./primitives";
export const ImportRow = z.object({
email: Email,
givenName: z.string().nullable().optional(),
familyName: z.string().nullable().optional(),
department: z.string().nullable().optional(),
location: z.string().nullable().optional(),
managerEmail: z.string().email().nullable().optional(),
jobTitle: z.string().nullable().optional(),
employeeId: z.string().nullable().optional(),
startDate: ISODate.nullable().optional(),
birthDate: ISODate.nullable().optional(),
nationality: z.string().nullable().optional(),
gender: z.string().nullable().optional(),
phone: z.string().nullable().optional(),
});
export type ImportRow = z.infer<typeof ImportRow>;

export const CommitChange = z.object({ field: z.string(), from: z.any(), to: z.any() });
export const CommitRecord = z.object({
incoming: ImportRow,
action: z.enum(["create","update","skip","invalid"]),
reason: z.array(z.string()).optional(),
changes: z.array(CommitChange).optional(),
});
export type CommitRecord = z.infer<typeof CommitRecord>;

export const CommitOverview = z.object({
creates: z.number(), updates: z.number(), skips: z.number(),
duplicates: z.number(), invalid: z.number(),
newDepartments: z.array(z.string()).optional(),
newLocations: z.array(z.string()).optional(),
managerMissing: z.number().optional(),
managerSelf: z.number().optional(),
managerCycles: z.number().optional(),
});
export type CommitOverview = z.infer<typeof CommitOverview>;

export const CommitPlan = z.object({
overview: CommitOverview,
records: z.array(CommitRecord),
});
export type CommitPlan = z.infer<typeof CommitPlan>;

export const ImportSessionToken = z.object({
orgId: z.string(),
csvSha256: z.string(),
createdAt: z.number(),
exp: z.number().optional()
});
export type ImportSessionToken = z.infer<typeof ImportSessionToken>;

// packages/contracts/src/media.ts
import { z } from "zod";
import { UUID } from "./primitives";
export const MediaKind = z.enum(["avatar","cover"]);
export const UserMedia = z.object({
userId: UUID,
kind: MediaKind,
storageKey: z.string(),
version: z.number(),
width: z.number().optional(),
height: z.number().optional(),
mime: z.string().optional(),
isDefault: z.boolean().optional(),
});
export type UserMedia = z.infer<typeof UserMedia>;

// packages/contracts/src/index.ts
export * as primitives from "./primitives";
export * as identity from "./identity";
export * as directory from "./directory";
export * as media from "./media";

// tsconfig.base.json (merge; keep everything else as-is)
{
"compilerOptions": {
"baseUrl": ".",
"paths": {
"@thrivio/contracts": ["packages/contracts/src/index.ts"],
"@thrivio/contracts/": ["packages/contracts/src/"]
}
}
}

// tsconfig.tmp.json (NEW)
{
"extends": "./tsconfig.base.json",
"compilerOptions": {
"noEmit": true
},
"files": ["tmp_contracts_check.ts"]
}

// tmp_contracts_check.ts (NEW)
import * as C from "@thrivio/contracts";
console.log(Object.keys(C));

RUN & PRINT
echo "=== CONTRACTS FILES ===" && find packages/contracts/src -maxdepth 1 -type f -print | sort
echo "=== PATHS IN tsconfig.base.json ===" && cat tsconfig.base.json | sed -n '1,200p'
echo "=== TEMP TSCONFIG ===" && cat tsconfig.tmp.json

The correct compile invocation: use ONLY -p (no direct file path)
npx tsc -p tsconfig.tmp.json && echo "=== TS PATH ALIAS OK ===" || echo "=== TS PATH ALIAS FAILED ==="

STOP.
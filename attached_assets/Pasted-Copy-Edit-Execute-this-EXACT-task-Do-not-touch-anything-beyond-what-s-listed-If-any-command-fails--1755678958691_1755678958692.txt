Copy
Edit
Execute this EXACT task. Do not touch anything beyond what’s listed.
If any command fails, PRINT the error and STOP. Do not “fix” or scaffold.

GOAL
Add two smoke tests to confirm final fixes:
1) ESLint completes fast, error-free, and excludes .next/static
2) /admin unauth -> /login redirect works; authed -> next

TOUCH ONLY
apps/web/__tests__/eslint.health.spec.ts
apps/web/__tests__/middleware.redirect.spec.ts

CHANGES
1) Create apps/web/__tests__/eslint.health.spec.ts
---
import { spawnSync } from 'child_process';

function runESLintJSON(timeoutMs = 20000) {
  const res = spawnSync(
    process.execPath,
    [
      'node_modules/eslint/bin/eslint.js',
      'apps/web',
      '--ext', '.ts,.tsx,.js,.jsx',
      '--format', 'json',
      '--no-error-on-unmatched-pattern'
    ],
    { encoding: 'utf8', timeout: timeoutMs }
  );

  if (res.error) throw res.error;
  if (res.signal) throw new Error(`eslint terminated by signal: ${res.signal}`);
  const out = (res.stdout || '[]').trim();
  let results: any[] = [];
  try { results = JSON.parse(out); } catch { throw new Error('Failed to parse ESLint JSON output'); }

  // Flatten counts
  const errors = results.reduce((s, r:any) => s + (r.errorCount || 0), 0);
  const offenders = results
    .map((r: any) => r.filePath as string)
    .filter((fp: string) => fp.includes('/.next/') || fp.includes('/static/'));

  return { errors, offenders, resultsCount: results.length };
}

test('eslint health: completes, no errors, excludes .next/static', () => {
  const { errors, offenders, resultsCount } = runESLintJSON(20000);
  // Must complete with no parse/timeout; must not include generated files; must have zero errors
  expect(offenders).toHaveLength(0);
  expect(errors).toBe(0);
  // Sanity: there should be some results, otherwise test isn’t meaningful
  expect(resultsCount).toBeGreaterThan(0);
});
---

2) Create apps/web/__tests__/middleware.redirect.spec.ts
---
// We mock next/server to avoid ESM/runtime requirements.
jest.mock('next/server', () => ({
  NextResponse: {
    redirect: (url: any) => ({ kind: 'redirect', url: String(url) }),
    next: () => ({ kind: 'next' })
  }
}));

import { middleware } from '../middleware';

function makeReq(url: string, token?: string) {
  return {
    url,
    cookies: {
      get: (_: string) => (token ? { value: token } : undefined)
    }
  } as any;
}

test('unauth /admin -> redirects to /login', () => {
  const res = middleware(makeReq('http://localhost:3000/admin'));
  expect(res).toHaveProperty('kind', 'redirect');
  expect(String((res as any).url)).toContain('/login');
});

test('authed /admin -> next()', () => {
  const res = middleware(makeReq('http://localhost:3000/admin', 'token'));
  expect(res).toHaveProperty('kind', 'next');
});
---

RUN & PRINT
1) echo "=== RUN the two new tests ==="
2) npx nx test web --testNamePattern="eslint health|middleware redirect" --runInBand

STOP.

enforce org scope in GraphQL (and prove no cross-org leakage)

Goal: ensure every GraphQL read uses the orgId from the JWT only (never from args), and add tests that prove data from Org B can’t be seen by a user from Org A.

Do exactly this (smallest changes):

Create a tiny guard that asserts req.user.orgId (HTTP) or ctx.req.user.orgId (GraphQL) exists and stashes it on the request for resolvers:

// apps/bff/src/modules/auth/org-scope.guard.ts
import { CanActivate, ExecutionContext, Injectable, ForbiddenException } from '@nestjs/common';
import { GqlExecutionContext } from '@nestjs/graphql';

@Injectable()
export class OrgScopeGuard implements CanActivate {
  canActivate(ctx: ExecutionContext): boolean {
    const isGraphQL = ctx.getType<'graphql' | 'http'>() === 'graphql';
    const req = isGraphQL ? GqlExecutionContext.create(ctx).getContext().req : ctx.switchToHttp().getRequest();
    const orgId = req?.user?.orgId;
    if (!orgId) throw new ForbiddenException('Organization scope required');
    // normalize: attach for resolvers/services
    req.orgId = orgId;
    return true;
  }
}


Apply the guard class-wide on your GraphQL resolvers that read employee/user data (keep JwtAuthGuard in place; this runs after JWT):

// apps/bff/src/graphql/resolvers/directory.resolver.ts
import { UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from '../../modules/auth/jwt-auth.guard';
import { OrgScopeGuard } from '../../modules/auth/org-scope.guard';

@UseGuards(JwtAuthGuard, OrgScopeGuard)
@Resolver('Query')
export class DirectoryResolver { /* unchanged business logic */ }


Use the orgId from request context, not from args (most likely already true). In the resolver method, read:

const orgId: string = ctx.req.orgId; // via @Context() ctx


Remove any leftover arg-based orgId if present.

Add two E2E tests that prove isolation:

Leakage test: create Org A (user a1), Org B (user b1). Log in as a1. Call listEmployeesConnection(first: 50). Assert no nodes contain b1.email.

Tamper test: repeat but try to pass a fake orgId argument (if your schema has none, add a negative test to ensure only the token’s org is used by verifying results exclude Org B).

// apps/bff/src/modules/graphql/graphql.e2e.spec.ts (append)
it('does not leak employees across orgs', async () => {
  // seed orgA + userA, orgB + userB; login as userA -> tokenA
  // query listEmployeesConnection(first:50) with tokenA
  // expect every edge.node.email toMatch /@.../ and NOT equal userB email
});

it('ignores any client attempt to scope org via inputs', async () => {
  // if schema has no org arg, simply assert results exclude OrgB
  // (tamper simulated by including a bogus variable in the POST body; server must ignore)
});


Definition of Done

nx build bff passes.

nx test bff --runInBand passes, including the two new tests.

Manual smoke: login as Org A; verify /graphql listEmployeesConnection never returns users from Org B.